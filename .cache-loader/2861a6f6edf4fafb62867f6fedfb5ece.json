{"remainingRequest":"F:\\Vue_Project\\chat\\src\\components\\login.jsx","dependencies":[{"path":"F:\\Vue_Project\\chat\\src\\components\\login.jsx","mtime":1564015617307},{"path":"F:\\Vue_Project\\chat\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\Vue_Project\\chat\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Input, Button, Form, message } from 'antd'\r\nimport './style/login.less'\r\n\r\nconst frames = {\r\n    LOGIN_STATE: 'LOGIN_STATE',      // 登陆\r\n    REGISTER_STATE: 'REGISTER_STATE' // 注册\r\n}\r\n\r\naxios.defaults.withCredentials = true;\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            frame: frames['LOGIN_STATE']\r\n        }\r\n    }\r\n\r\n    toggleFrameState = () => {\r\n        this.setState(({ frame }) => {\r\n            const nextFrame = frame === frames['LOGIN_STATE']\r\n                ? frames['REGISTER_STATE'] : frames['LOGIN_STATE'];\r\n            return {\r\n                frame: nextFrame\r\n            }\r\n        })\r\n    }\r\n\r\n    handleLink = ({ account, nickname }) => {\r\n        window.localStorage.setItem('account', account);\r\n        window.localStorage.setItem('nickname', nickname);\r\n        this.props.history.push({ pathname: '/chat' });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                const { account, password, nickname } = values;\r\n\r\n                if (this.state.frame === frames['LOGIN_STATE']) {\r\n                    axios.post('/api/login', {\r\n                        account,\r\n                        password\r\n                    }).then((payload) => {\r\n                        const { data } = payload;\r\n                        const { type, nickname, account } = data;\r\n                        // debugger;\r\n                        switch (type) {\r\n                            case 0:\r\n                                message.success('登陆成功', () => {\r\n                                    this.handleLink({ nickname, account });\r\n                                })\r\n                                break;\r\n                            case 1:\r\n                                message.error('登陆失败，账号不存在')\r\n                                break;\r\n                            case 2:\r\n                                message.error('登陆失败，密码错误')\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    });\r\n                } else {\r\n                    axios.post('/api/register', {\r\n                        account,\r\n                        password,\r\n                        nickname\r\n                    }).then((payload) => {\r\n                        const { data } = payload;\r\n                        const { success } = data;\r\n                        if (success) {\r\n                            message.success('注册成功')\r\n                        } else {\r\n                            message.error('账号或昵称已存在，注册失败')\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                <div className='login-wrapper'>\r\n                    <div className='logo' />\r\n                    {this.state.frame === frames['REGISTER_STATE']\r\n                        && <Form.Item>\r\n                            {getFieldDecorator('nickname', {\r\n                                rules: [{ required: true, message: '昵称不能为空' }],\r\n                            })(\r\n                                <Input\r\n                                    className='input'\r\n                                    size=\"large\"\r\n                                    placeholder=\"请输入昵称\"\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                    }\r\n                    <Form.Item>\r\n                        {getFieldDecorator('account', {\r\n                            rules: [{ required: true, message: '请输入用户名' }],\r\n                        })(\r\n                            <Input\r\n                                className='input'\r\n                                size=\"large\"\r\n                                placeholder=\"请输入账号\"\r\n                            />\r\n                        )}\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        {getFieldDecorator('password', {\r\n                            rules: [{ required: true, message: '请输入密码!' }],\r\n                        })(\r\n                            <Input\r\n                                className='input'\r\n                                size=\"large\"\r\n                                placeholder=\"请输入密码\"\r\n                            />\r\n                        )}\r\n                    </Form.Item>\r\n                    <Button className='login-button' type=\"primary\" htmlType=\"submit\">\r\n                        {this.state.frame === frames['REGISTER_STATE']\r\n                            ? '注册'\r\n                            : '登陆'\r\n                        }\r\n                    </Button>\r\n                    <p className='tip' onClick={this.toggleFrameState}>\r\n                        {this.state.frame === frames['REGISTER_STATE']\r\n                            ? '已注册，去登陆？'\r\n                            : '注册账号'\r\n                        }\r\n                    </p>\r\n                </div>\r\n            </Form>)\r\n    }\r\n}\r\nconst wrapperLogin = withRouter(Login);\r\nexport default Form.create({ name: 'login' })(wrapperLogin);\r\n"]}