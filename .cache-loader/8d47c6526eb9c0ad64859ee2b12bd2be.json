{"remainingRequest":"F:\\Vue_Project\\chat\\src\\components\\chat.jsx","dependencies":[{"path":"F:\\Vue_Project\\chat\\src\\components\\chat.jsx","mtime":1564056543745},{"path":"F:\\Vue_Project\\chat\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\Vue_Project\\chat\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport 'antd/dist/antd.css';\r\nimport './style/chat.less';\r\nimport { Input, Button, message, Form, Row, Col } from 'antd';\r\n\r\nconst { Search } = Input;\r\n// socket束的名称\r\nconst DEFAULT_ROOM = 'DEFAULT_ROOM'\r\n// 三种类型的聊天文本\r\nconst MY_WORD = 'MY_WORD'; // 自己输入的文本\r\nconst OTHER_WORD = 'OTHER_WORD'; //自己输出的文本\r\nconst NOTICE = 'NOTICE'; // 提示\r\nconst OFFLINE_NOTICE = 'OFFLINE_NOTICE'; // 下线提示\r\nconst PLAIN_TEXT = 'PLAIN_TEXT' // 普通文本（灰）\r\n\r\naxios.defaults.withCredentials = true;\r\n\r\nclass Chat extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.nickname = window.localStorage.getItem('nickname');\r\n        this.state = {\r\n            chats: [],\r\n            mems: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { history } = this.props;\r\n        const account = window.localStorage.getItem('account');\r\n        axios.get(`/api/session?account=${account}`).then(({ data: { success } }) => {\r\n            if (!success) {\r\n                message.error('尚未登录，请先登录!', () => {\r\n                    history.push({ pathname: '/login' })\r\n                })\r\n            } else {\r\n                this.fetchChatRecord();\r\n                this.initSocket();\r\n            }\r\n        })\r\n    }\r\n\r\n    fetchChatRecord = () => {\r\n        axios.get('/api/chat_record').then(({ data }) => {\r\n            const records = data.map(item => {\r\n                if (item.nickname === this.nickname) {\r\n                    return { ...item, type: MY_WORD }\r\n                } else {\r\n                    return { ...item, type: OTHER_WORD }\r\n                }\r\n            });\r\n            records.push({ \r\n                type: PLAIN_TEXT,\r\n                text: '以上为历史记录'\r\n            })\r\n            this.setState({\r\n                chats: records\r\n            })\r\n        })\r\n    }\r\n\r\n    // 初始化Socket.io\r\n    initSocket = () => {\r\n        this.socket = io('localhost:4000', {\r\n            transports: ['websocket', 'polling']\r\n        });\r\n        this.joinRoomWithIo();\r\n        this.observeOtherLeave();\r\n        this.observeOtherJoin();\r\n        this.observeOtherMessage();\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        let ele = document.getElementsByClassName('content')[0];\r\n        ele.scrollTop = ele.scrollHeight;\r\n    }\r\n\r\n    // 处理自己加入聊天室逻辑\r\n    joinRoomWithIo = () => {\r\n        this.socket.emit('join-room', { newMem: this.nickname }, (mems) => {\r\n            this.setState({\r\n                mems: [...mems]\r\n            })\r\n        });\r\n    }\r\n\r\n    // 处理其他用户离开聊天室的逻辑\r\n    observeOtherLeave = () => {\r\n        this.socket.on('other-leave-room', ({ mem }) => {\r\n            this.setState(({ chats, mems }) => {\r\n                return {\r\n                    chats: [...chats, {\r\n                        type: OFFLINE_NOTICE,\r\n                        nickname: mem\r\n                    }],\r\n                    mems: mems.filter(item => item !== mem)\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    // 处理他人加入聊天室逻辑\r\n    observeOtherJoin = () => {\r\n        this.socket.on('other-join-room', ({ newMem }) => {\r\n            this.setState(({ chats, mems }) => {\r\n                return {\r\n                    chats: [...chats, {\r\n                        type: NOTICE,\r\n                        nickname: newMem\r\n                    }],\r\n                    mems: [...mems, newMem]\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    //处理发送信息逻辑\r\n    sendMessageWithIo = () => {\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err && values.message) {\r\n                this.socket.emit('send-message', {\r\n                    nickname: this.nickname,\r\n                    word: values.message\r\n                }, () => {\r\n                    this.setState(({ chats }) => {\r\n                        return {\r\n                            chats: [...chats, {\r\n                                type: MY_WORD,\r\n                                nickname: this.nickname,\r\n                                word: values.message\r\n                            }]\r\n                        }\r\n                    }, this.scrollToBottom)\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // 处理他人发送信息的逻辑\r\n    observeOtherMessage = () => {\r\n        this.socket.on('other-send-message', ({ nickname, word }) => {\r\n            this.setState(({ chats }) => {\r\n                return {\r\n                    chats: [...chats, {\r\n                        type: OTHER_WORD,\r\n                        nickname,\r\n                        word\r\n                    }]\r\n                }\r\n            }, this.scrollToBottom)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Form className=\"chat-form\">\r\n                <div className='wrapper'>\r\n                    <div className='chat-wrapper'>\r\n                        <div className='header'>\r\n                            <div className='icon' />\r\n                            <span className='title'>聊天室</span>\r\n                        </div>\r\n                        <div className='content'>\r\n                            <div className='visual-area'>\r\n                                {this.state.chats.map((item, i) => {\r\n                                    switch (item.type) {\r\n                                        case NOTICE:\r\n                                            return (\r\n                                                <div className='notice-wrapper' key={i}>\r\n                                                    <span className='welcome-notice'>{item.nickname}欢迎加入本群</span>\r\n                                                </div>)\r\n                                            break;\r\n                                        case OFFLINE_NOTICE:\r\n                                            return (\r\n                                                <div className='notice-wrapper' key={i}>\r\n                                                    <span className='welcome-notice'>{item.nickname}离开了聊天室</span>\r\n                                                </div>)\r\n                                            break;\r\n                                        case MY_WORD:\r\n                                            return (\r\n                                                <div className='message-wrapper' key={i}>\r\n                                                    <div className='avatar avatar-right'><p>{String(item.nickname).charAt(0)}</p></div>\r\n                                                    <div className='message message-right'>{item.word}</div>\r\n                                                </div>)\r\n                                            break;\r\n                                        case OTHER_WORD:\r\n                                            return (\r\n                                                <div className='message-wrapper' key={i}>\r\n                                                    <div className='avatar avatar-left'><p>{String(item.nickname).charAt(0)}</p></div>\r\n                                                    <div className='message message-left'>{item.word}</div>\r\n                                                </div>)\r\n                                            break;\r\n                                        case PLAIN_TEXT:\r\n                                            return (\r\n                                                <div className='message-wrapper' key={i}>\r\n                                                    <span className='history'>{item.text}</span>\r\n                                                </div>)\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className='footer'>\r\n                            <Row>\r\n                                <Col span={15}>\r\n                                    <Form.Item>\r\n                                        {getFieldDecorator('message')(\r\n                                            <Search\r\n                                                className='message-input'\r\n                                                placeholder=\"聊点什么吧\"\r\n                                            />\r\n                                        )}\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col span={6}>\r\n                                    <Button\r\n                                        ghost\r\n                                        onClick={this.sendMessageWithIo}\r\n                                        className='button'\r\n                                    >\r\n                                        发送\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </div>\r\n                    <div className='member-wrapper'>\r\n                        {this.state.mems.filter(item => !!item).map((memNick, i) => {\r\n                            return <div className='member' key={i}><span>{memNick}</span></div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </Form>)\r\n    }\r\n}\r\n\r\nexport default Form.create({ name: 'chat' })(withRouter(Chat));"]}